#!/usr/bin/env bash
#
#  rxmv - a file renamer using regular expressions
#
#    Author: Gary Hetzel <garyhetzel@gmail.com>
#
#    Example Syntax:
#
#      rxmv 's/^\([0-9]*\) \(.*\)\(\.mp3\)/\2: \1\3/' *.mp3
#
#      On a folder whose contents look like this:
#
#        2004 Track 1.mp3
#        1998 Track 2.mp3
#        2008 Track 3.mp3
#        2002 Track 4.mp3
#        1994 Track 5.mp3
#
#      The files will be renamed as follows:
#
#        Track 1: 2004.mp3
#        Track 2: 1998.mp3
#        Track 3: 2008.mp3
#        Track 4: 2002.mp3
#        Track 5: 1994.mp3
#
#    Files that do not match the given pattern will be ignored.  Changes
#    are shown on STDOUT and require confirmation before performing a
#    rename operation (default behavior).
#
#

if [ $# -eq 0 ]; then
	 echo "Syntax: $(basename $0) [options] expression FILE .."
	 exit 1
fi

while getopts "hy" OPTS
do
  case $OPTS in
    y ) IN="yes";;
    h ) echo $USAGE
        exit 1;;
   \? ) echo $USAGE
        exit 1;;
    * ) echo $USAGE
        exit 1;;
  esac
  shift
done

RX="$1"
shift
OUTTBL=""

for i in "$@"
do
	OUT="$(echo "$i" | sed -e "$RX")"
	if [ "$i" != "$OUT" ]; then
		OUTTBL="$OUTTBL\t$i|-->|$OUT\n"
#	else
#		OUTTBL="$OUTTBL\t$i|-->|-\n"
	fi
done

echo -e "$OUTTBL" | column -t -s'|'

if [ ${#OUTTBL} -gt 0 ]; then
	if [ -z $IN ]; then
		echo -n "Are you sure you want to proceed with the proposed changes? (yes/no): "
		read IN
		while [ "$IN" != "yes" ] && [ "$IN" != "no" ] && [ "$IN" != "n" ]; do
			echo -n "Please answer 'yes' or 'no': "
			read IN
		done
	fi

	if [ "$IN" == "yes" ]; then
		for i in "$@"
		do
			OUT=$(echo "$i" | sed -e "$RX")
			if [ "$i" != "$OUT" ]; then
				mv "$i" "$OUT"
			fi
		done
	fi
fi

